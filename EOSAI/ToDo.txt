
See if this is necessary in EOS:
Test this new code to see if it works in WindowsXP
It's used in other places, too, so just search for "#if (WINVER >= 0x0500)"
--------------------------------
#if (WINVER >= 0x0500)
	HMODULE hUser32 = ::GetModuleHandle (_T("USER32.DLL"));
	if (hUser32 != NULL)
	{
		typedef HMONITOR (WINAPI *FN_MonitorFromWindow) (HWND hWnd, DWORD dwFlags);
		typedef BOOL (WINAPI *FN_GetMonitorInfo) (HMONITOR hMonitor, LPMONITORINFO lpmi);
		FN_MonitorFromWindow pfnMonitorFromWindow = (FN_MonitorFromWindow)
			::GetProcAddress (hUser32, _T("MonitorFromWindow"));
		FN_GetMonitorInfo pfnGetMonitorInfo = (FN_GetMonitorInfo)
			::GetProcAddress (hUser32, _T("GetMonitorInfoA"));
		if (pfnMonitorFromWindow != NULL && pfnGetMonitorInfo != NULL)
		{
			MONITORINFO mi;
			HMONITOR hMonitor = pfnMonitorFromWindow (m_hWnd, 
				MONITOR_DEFAULTTONEAREST);
			mi.cbSize = sizeof (mi);
			pfnGetMonitorInfo (hMonitor, &mi);
			ScreenSize.cx = mi.rcWork.right - mi.rcWork.left;
			ScreenSize.cy = mi.rcWork.bottom - mi.rcWork.top;
		}
	}
#endif
--------------------------------

Initial Work:

Unit Tests
- Write Tests - I'd like to verify that the AI is working properly at all times.
  - I can use EOS as a test harness.
  - I can also create some fake (non EOS) maps. It's easy enough to do. It doesn't require that an actual map exists.

- Move away from the EOSAI prefix on everything? It gets verbose.

AI User Interface:
  - Get a display system working, so that I can see what the AI is doing (what messages is it sending, etc)
  - Build a UI that can monitor the AI's current state. e.g. How does it view the current power-balance, messages sent/received, resources, cities, units, etc
  - There are two things here: 
    - There's the AI's current state (what the strategic AI thinks, build orders, messages sent/received, etc)
	- There's also heatmaps (danger, etc). I might need the heatmaps to be rendered in the game engine. Or maybe the AI UserInterface needs to interact with
	  the game's rendering engine to change the display (i.e. I can control the game's rendering engine from the AI's UserInterface process).
	  - One of the problems is that the map might be curved all weird - like a globe. Although, to be fair, I think most game maps are flat, so maybe
	    I could create a flat-map as a default, and if the game is doing anything weird, they can render their own.
  - What should the UI be written in? I could write a QT application, so that it's cross-platform.

- Find all the TODO, THINGS_TO_COMPILE_EVENTUALLY, GAME_CODE, "EOSAI TODO" (in EOS) messages, fix the code.

- Right now, it appears that there may be cases where the AI needs to have a deep understanding of the game rules.
  For example, if iron is running low, then he needs to shift his city-build orders to construct fewer things that require iron.
  Of course, this depends on the AI understanding that iron is a consumable resource (not an infinite "available/unavailable" resource, like Civ does).

- Get rid of the "2" -  e.g. "CEOSAIUnit2", etc

- CEOSAICity::GetGroundSeaDanger01() needs to be written better. If the AI is next to a neutral player, he doesn't register as "dangerous",
    even in cases where it's obvious war will occur within the next 20 turns (based on the fact that there are no other players, and few
	neutral cities left). I feel like this would be more obvious if I could look at the AI's view of the world with heatmaps.
	- Maybe the StrategicAI needs to be used here to indicate some sort of generalized "danger of war" value (perhaps a separate one for each player)

- Look for EOSAI::AIPlayer in EOS. There are a few places where I stubbed out the AI and put an ASSERT(false) in there because I need to add
    functionality to the AI before it will work.

- The AI needs to be able to trade with each other. Right now, I assume that all trade is between a human and an AI.
  - In the WorldDescServer message handling (for MessageFromAI), I actually have asserts to make sure there is a human involved in the trade, which
    is unnecessary.
- The AI should be able to *initiate* trades with human players, too. (Right now, he passively lets others initiate trades.)

- How do I get the technology tree and the unitset data over, without too much entanglement with EOS?
  - Or do I just not worry about that for now?  I could get things working and then try to increase the separation.
  - I will eventually want a generic system for:
    - Specifying units capabilities (build times/resources, maintenance, movement, range, terrain movement, combat, transport, etc)
    - Technology tree (prerequisites, costs, advantages, etc)
	- I would like to get a generic system, sort of like I do for terrain
	- Right now, though, I think the best course of action is to copy over the code from EOS.  Hopefully, there isn't too much entanglement.

- I could come up with a sequence-list of how the AI is building it's decisions 
  - i.e. foreign relations strategy, create multiregions, create geos, create AIPoiObjects, create desires, ...
  - It could be helpful in figuring out flaws in the sequence

I'm not sure if I still use it, but I might need to bring over:
- CAICombatPlanner, CAIQuickCombatCalculation, CAIQuickCombatResults, CAIUnitCombatCapability, CAIUnitVsUnitValue

- Just in case regular EOS isn't working: double-check "Brit-Feb16"

- void CEOSAIInterface_EOS::TurnPoiObjectsIntoAIPoiObjects() - I delete and recreate every AIPoiObject each turn.
  - I might be duplicating the MultiRegion and AIRegions each turn (i.e. making multiple copies)
  
- I should change how I'm tracking some of the items. For example, the EOSAICity contains Buildings, but each of them is pointer to an object.
  - I should really have a list of names. The ConvertToEOSAICity2 function is just a little unweildy.
    I should store the building name and maybe a count, example: "Barracks" count: 1
    pAICity->GetBuildingList()->AddTail( pAIBuildingDesc );

- I should also change the way the objects are stored. If I store them as a map (instead list), I could quickly search them.

- Do I need to create Geos for the AI?
		CList< CEOSAIGeo* >*  GetGeoList(){ return &m_EOSAIGeos; }
		CEOSAIGeo*  GetGeo( long iGeo ){ ASSERT( false ); return NULL; }
		CEOSAIGeo*  GetGeo( CEOSAILocation Location ){ ASSERT( false ); return NULL; }
		long        GetGeoId( CEOSAILocation Location ){ ASSERT( false ); return 0; }

Do documentation
It would be nice if the old AI and the new AI could play against each other - to make sure that the AI is getting better.
  One easier alternative would be to setup some challenges - for example, to see how fast the AI can takeover the map.
  This wouldn't be able to test how well the AI plans invasions, just how well it can play the beginning game.
  Measuring how fast the AI calculates its turn would also be useful.

I could have some memory leaks with stuff like "ClearPredefinedAndResultPaths".

Right now, I'm using both SetCurrentHP and InitialState->SetHP.  I might want to switch to one or the other.
	pAIUnit->SetCurrentHP( pUnit->GetCurrentHP() );
	pAIUnit->GetInitialState()->SetHP( pUnit->GetCurrentHP() );

- TransferServer doesn't work
    The code:
	ASSERT( false ); // We're not supporting this right now
	g_pEOSAIInterface->InstanciateAIPlayers();
	g_pEOSAIInterface->GetAIPlayerManager()->InstanciateThreadAndPauseIt();
	m_pWorldDescServer->CreateAICommonData();
	m_pWorldDescServer->ActivateAIPlayers();

- I should setup a bunch of test cases for the AI, just ot make sure it's performing like I want. I want automated tests.
  - I should make a landwar test case, where the AI has the option to build ships (there are coastal cities), but he needs to build land units.
  - I could also setup some test cases where the AI can build an unlimited amount of city improvements. It needs to balance the city
      improvements against unit-building. (Right now, the only reason the AI stops building certain city improvements is because it can
      only build one copy of, say, a barracks in a city.)

- Need to go through the events and write converters:
   - CNationalGameEventTeamFormed, etc
   
- Might need to copy "CAITradeDesires" into EOSAI. It's currently inside EOS.
- Might need to copy "CAIJobCapability" into EOSAI. It's currently inside EOS.
- Do we ever have any attack records? "pSerial->Serialize( (long) m_AttackRecordList.GetCount() );"
  - Maybe we can hard-code this to zero. I want the AI to remember all of its own data.

- I should create a Unitsubset object, so that I can add things like "m_InitialCanBuildUnitList" into the unitsubset

- WorldDescPlayer::Serialize is serializaing the AIPlayer: "pAIPlayer->Serialize( pSerial );"
  - If I want backwards compatibility, I should write the (deserialize) code to do this - i.e. code to deserialize old EOS saved-games

- In "CWorldDesc::ApplyAllEvents()", I think I might use the "WorldDescPlayer->AICheat_SynchrononizeAllPoiObjectsWithServer();" call,
    but I'm not sure because I also have an ASSERT there that would get called. Maybe the AI doesn't use the WorldDescPlayer object, which
    makes sense.  That was probably a really early version of the AI.

- The AI doesn't update the "ready to submit turn" image on the player's screen (it works on the first turn, but not after that).

Messages/Foreign Relations:
- Create new messages, including:
  - EOSAIStrategicAIOrder_AISuggestsYouResign
  - There could be a "tribute" trade option (basically a "don't attack me, I'll pay you")
  - Vassal States / Surrender to another country

Later Work:
- Try to make things more generic (resources, unit/tech costs, what can trigger a building/unit to be buildable, etc)
- Can I switch it over from CEOSAIClass to EOSAI::CClass?  I already did this with EOSAIActionScheduler and EOSAIBuildManager
- Add a negotiation engine - this would allow the AI to make decisions about buying and selling stuff, affect relations, add personality.
  - This would involve setting values on the buy/sell cost, and limits on how much they're willing to buy and sell.
- To do: convert everything to STL.  I should be moving away from MFC.
  - Cross-compatibility will require that I move to STL.
  - I need to check if the VisualStudio debugger shows stl::string values, like it does with CString
- Can I add multicore support to the AI?  It seems like I could get things to run faster with multiple cores.
  - Most of the slowness comes from the pathfinding system. Maybe I could have separate sections in each object for the different cores.
  - Example: Pathfinding distance would be in an array and each core would access different variables.
- Expand the personality variables of each AI.

- EOSAINationalSummary needs to include data for:
	CEOSAIResourceEffectsSummary  m_AIResourceEffectsSummary; - the current state of resource-shortage effects (e.g. slowed units, etc)
    Maybe I can put these in the same place as I put: m_AICommonData.m_AINationalSummaries[iPlayer]->m_TotalResources.Set( "Money", m_pWorldDescServer->GetWorldDescPlayerProxy(iPlayer)->GetTotalMoney() );

- RESOURCES
  - I should setup a system where the AI can track the future predicted resources' consumption and production.
    Right now, I track the resource consumption+production for the upcoming turn, but there's a smarter/better way to do it.
	If tank production is consuming 10 iron/turn, it doesn't mean that my empire will be consuming 10 Iron/turn indefinitely.
	Also, resource sources might get exhausted (like they do in Starcraft). In that case, the AI should think-ahead and make sure there are
	enough resources for the future.
	I could create a graph of future resource levels, where it's predicted where the resouce levels will be at 5,6,7+ turns in the future.
	  This graph needs to take into account, though, that new production needs to be started too 
	  (e.g. if I produce another tank after this one, it will also consume iron)
	  There may be cases, though, where there's an occasional large cost that happens once every 20 turns. If the AI doesn't know that this is
	    a very short-term cost, it tries to use a budget where it assumes the cost is recurring every turn, which can really screw up planning for the future.
  - At some point, I should probably make a differentiation between ConsumableResources and BinaryResources. ConsumableResources (EOS, Starcraft) get used up.
     BinaryResources (saltpeter in Civilization) don't get used up, but you need to keep control of one copy of them.
	 There's another variation used by EndlessSpace and StarDrive - resouces that are binary, but get more powerful the more ResourceSources you own.

  - There's an issue with the PlayerResourceSummary::ResourceDelta -- the values are based on the current city-build, unit-orders state, which isn't set
      until the AI has finished his turn. But, trade prices and desire to buy/sell are based on the ResourceDelta. What this means is that the AI thinks 
	  he has more oil and iron at the beginning of the turn than at the end (after he's setup his city-build and unit-orders), which means the prices are lower
	  and his willingness to buy/sell are changed.
	  I think the AI should read what the current build and movement orders are and use that in the ProductionByOrders and ConsumptionByOrders Calculations.
  - I should probably add-back the PlayerResourceSummary::m_ResourceConsumptionRate because it can help modulate the AI behavior in low-resource conditions
  - I should hide more of the AI's methods. For example, I call this method from inside EOSAIInterface_EOS.cpp (which is inside EOS):
      m_AICommonData.m_AINationalSummaries[iPlayer]->m_ResourceSummary.m_TotalResources.Set(...)
	  I should have a better interface for that. Developers shouldn't need to reach down into the data structures to set that.
	  The Developer shouldn't even be able to see that in there first place.

- The Autosave-AITest file:
  - I wonder why the AI is building artillery.
  - AIJobSolution
    - Water - Food 6, 8, 9
    - Water - Food 13
    - Water - Oilfield 2
    - Water - Oil 5
    - Land - "Ankara" City (13 population), ObjId 12; Iron Mine 3 (ObjId 84)- the AI should send a transport / MultiRegion=12
    - Land - "Cape Town" City (10 population), ObjId 7
    - Land - "Belo Horizonte" City (12 population), ObjId 15; "Dallas" (7 Pop) ObjId 13
    - Land - "Tehran" City (9 population), ObjId 9; "Lisbon" (5 Pop) ObjId 19

  If you load the AIGame - Turn 10, the transport is trying to pickup something, but no units have orders to get picked up.
    Unit ObjectId 150,151 (Infantry), 183 (Artillery)
    Target "Iron" ObjectId 89, 97

There's something wrong with the AI capturing cities. Even when I crank up m_CitResValueMultiplier.m_fCityProductionValueMultiplier to 200,
  the AI is still going after resources rather than cities.

Changed code:
CAIPoiObject::ReleaseAllocatedUnitActionIdea( CAIUnitActionIdea* pUnitActionIdea )
void CAIUnitActionIdea::CreatePredefinedStep() 2809
void CAIUnitPathwayFinder::CreateOrders() 1348
	
--------------------------
Long Term Goals:
- Get rid of all references to Money, Food, Iron, and Oil. They are game-specific resources. 
    Although money might be okay, since it's so common.
- The AI needs to be better about responding to changes in trade states. 
    Right now, CEOSAIStrategicAI::ProcessTradeAgreementResponse( CEOSAITradeAgreementResponse* pTradeAgreementResponse, bool* pbWasSignificant )
	handles the case, but it doesn't handle it intelligently.
- The CEOSAIStrategicAI::EvaluateTradeAgreement( CEOSAITradeAgreement* pTradeAgreement, CString* strOpinionText, long* pOpinionSum )
    should be internationalizable, and it should allow for each AI to send back a different response (in line with his personality)
- Maybe I can output all the city orders at the end. Right now, I have calls being made into the g_pEOSAIInterface that changes the vity build orders while
    the AI is processing. I don't know if I like that. Maybe all the orders at the end would be best.
	See: CEOSAIInterface_EOS::SetBuildOrder(...)
--------------------------
void CGameHostManagementDialog::OnConfirmPlayerSwitch() - make sure this works, but it's not high-priority. It changes the AI player during the middle of a game.


WorldDesc.cpp - line 7080
			#ifdef USE_EOSAI_DLL
			EOSAI::AIPlayer* pAIPlayer = g_pEOSAIInterface->GetAIPlayer( GetLocalPlayerNumber() );
			if( pAIPlayer )
			{
				// I should probably write a EnumTradeAgreementResponse, EnumTradeAgreementState converter here
				ASSERT(false); //--pAIPlayer->Incoming_TradeAgreementResponse( strTradeAgreementId, iPlayerWhoResponded, eResponse, eNewState );
			}



GameEvent_IMail.cpp - line 455
#ifdef USE_EOSAI_DLL
				EOSAI::AIPlayer* pAIPlayer = g_pEOSAIInterface->GetAIPlayer( iReceivingPlayer );
				ASSERT(false); // if( pAIPlayer ){ pAIPlayer->Incoming_IMail( this ); }
#else USE_EOSAI_DLL



GameEvent_TradeAgreement.cpp - line 307
#ifdef USE_EOSAI_DLL
				EOSAI::AIPlayer* pAIPlayer = g_pEOSAIInterface->GetAIPlayer( m_iSendToPlayerNumber );
				if( pAIPlayer )
				{
					ASSERT(false); // - need converter - pAIPlayer->Incoming_TradeOffer( m_pTradeAgreement );
				}
				else
				{
					// Resend it to the target player - now the sender sends it to the target player
				//	m_ShouldBeKnownBy.SetValue( m_iSendToPlayerNumber, true );
				//	SendEventToShouldBeKnownByList( g_pMessageTargetManager->GetMessageTarget_ServerId() ); // Send to all players in ( m_ShouldBeKnownBy - m_aHasBeenSent )
				}
#else USE_EOSAI_DLL





GameEvent_TradeAgreement - line 413
#ifdef USE_EOSAI_DLL
				EOSAI::AIPlayer* pAIPlayer = g_pEOSAIInterface->GetAIPlayer( iReceivingPlayer );
				ASSERT(false);// need converter - if( pAIPlayer ){ pAIPlayer->Incoming_TradeOffer( m_pTradeAgreement ); }
#else USE_EOSAI_DLL




NationalGameEventTeamFormed - line 104
#ifdef USE_EOSAI_DLL
		EOSAI::AIPlayer* pAIPlayer = g_pEOSAIInterface->GetAIPlayer( pWorldDescPlayer->GetLocalPlayerNumber() );
		if( pAIPlayer )
		{
			ASSERT(false);// need converter - pAIPlayer->IncomingEvent_TeamFormed( m_strTeamName );
		}
#else USE_EOSAI_DLL




CMessage2_GenericXML - line 114
				#ifdef USE_EOSAI_DLL
				EOSAI::AIPlayer* pAIPlayer = g_pEOSAIInterface->GetAIPlayer( pPlayer->GetPlayerNumber() );
				if( pAIPlayer )
				{
					ASSERT(false); // Need a EnumIMailResponse->EOSAI::EnumAIMailResponse converter
					//pAIPlayer->Incoming_IMailResponse( iIMailId, iSendingPlayer, eResponse );
				}
				#else



MessageManager.cpp - line 3005
#ifdef USE_EOSAI_DLL
			ASSERT( pPlayer->IsLocal() );
			if( pPlayer->IsHuman() == false )
			{
				EOSAI::AIPlayer* pAIPlayer = g_pEOSAIInterface->GetAIPlayer( pPlayer->GetPlayerNumber() );
				ASSERT( pAIPlayer );
				if( pAIPlayer )
				{
					ASSERT(false); // Need a converter
					//pAIPlayer->Incoming_TradeOffer( pTradeAgreement );
				}
			}
			if( g_pGameAppState->GetCurrentPlayer()->GetMessageTargetId() == message.GetReceiverId() )
			{
				g_pGameAppState->Incoming_TradeOffer( pTradeAgreement );
			}
#else
	
	
	